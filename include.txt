🏛️ 系統架構分析
主要組件
Controller類別: 核心控制器，管理所有視窗間的導航和狀態
DatabaseManager: SQLite數據庫操作
多個專用視窗: 每個功能都有獨立的UI視窗
用戶角色
一般用戶: 銀行交易功能
管理員: 系統管理功能
💳 一般用戶功能
1. 登入系統
帳號密碼驗證
SHA-256密碼雜湊
帳戶鎖定機制（多次登入失敗）
狀態檢查（啟用/停用帳戶）
2. 銀行交易功能
存款 (depositWindow)
提款 (withdrowWindow)
轉帳 (TransWindow)
交易紀錄查詢 (docuWindow)
3. 帳戶管理
密碼變更 (changepasswordWindow)
餘額查詢
交易摘要顯示 (summaryWindow)
🔧 管理員功能
1. 帳戶管理
帳戶列表查看 (acclistWindow)
新增帳戶 (addaccwindow)
帳戶狀態設定 (setstatuswindow)
2. 系統管理
密碼重設 (setpasswordwindow)
用戶權限管理
🔄 系統流程設計
訊號-槽連接架構
從程式碼可以看出，Controller使用了完整的Qt訊號-槽機制：

狀態管理
使用靜態變數儲存當前登入狀態：
Controller::account: 當前用戶帳號
Controller::id: 用戶ID
Controller::balance: 當前餘額
安全機制
密碼雜湊: 使用QCryptographicHash進行密碼加密
權限控制: 一般用戶和管理員分離登入
帳戶鎖定: 防止暴力破解
即時驗證: 每次操作都檢查用戶狀態
📊 數據庫設計
基於之前的分析，數據庫包含：

用戶基本資料（帳號、密碼雜湊、狀態、餘額）
交易歷史記錄（最近5筆交易的時間、金額、餘額變化）
🎯 系統特色
完整的MVC架構: Controller負責協調各個視窗
模組化設計: 每個功能都有獨立的視窗類別
即時更新: 所有操作後都會刷新相關資料
用戶體驗: 包含歡迎訊息、操作確認、錯誤處理
國際化支援: 支援中文界面（ATM_zh_TW.ts）
這個ATM系統展現了優秀的物件導向設計原則，具有良好的可維護性和擴展性。每個視窗都有清晰的職責分工，Controller作為中央協調者管理整個應用程式的狀態和流程。